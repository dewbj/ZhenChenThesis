//*Creates 1000 simulated patient nodes, each has a randomly assigned rare disease, up to 9 related Outer HPOs, 1 other related HPO 
call apoc.periodic.iterate('call apoc.create.uuids(1000) yield uuid with uuid match (d:Disease) return uuid, collect(d.DisorderName) as Diseases','create (p:Patient:Test_O1 {uuid:uuid}) set p.DisorderName = apoc.coll.randomItem(Diseases) with p match (d:Disease) where d.DisorderName = p.DisorderName optional match (d)-[:Phenotype]->(o:HPO:Outer) optional match (d)-[:Phenotype]->(i:HPO:Inner) with collect(i.HPO_Term_Name) as iHPOs, p, collect(o.HPO_Term_Name) as oHPOs set p.HPO_Term_Name = case when size(iHPOs) = 0 and size(oHPOs) > 0 then apoc.coll.randomItems(oHPOs,apoc.coll.randomItem(range(1,10))) when size(iHPOs) > 0 and size(oHPOs) = 0 then apoc.coll.randomItems(iHPOs,apoc.coll.randomItem(range(1,10))) else apoc.coll.randomItems(iHPOs,1) + apoc.coll.randomItems(oHPOs,apoc.coll.randomItem(range(0,9))) end', {batchSize:1,parallel:false})